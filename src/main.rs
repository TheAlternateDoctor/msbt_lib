use std::{fs::File, io::Write};

use msbt::msbt;
use ::msbt::structs::{Header, ATR1, LBL1, TXT2};

fn main() -> ::msbt::Result<()> {
    // let mut file = File::open("agb.msbt")?;
    // let msbt = msbt::from_binary(&mut file)?;
    // let strings = msbt::get_strings(msbt.clone())?;
    // let new_msbt = msbt::to_binary(strings, msbt.endianness)?;
    // let mut result = File::create("foo.msbt")?;
    // result.write(&new_msbt)?;
    let string: [u8;118] = [0x54,0x00,0x68,0x00,0x65,0x00,0x20,0x00,0x6B,0x00,0x65,0x00,0x79,0x00,0x20,0x00,0x68,0x00,0x65,0x00,0x72,0x00,0x65,0x00,0x20,0x00,0x69,0x00,0x73,0x00,0x20,0x00,0x74,0x00,0x6F,0x00,0x20,0x00,0x0E,0x00,0x00,0x00,0x03,0x00,0x04,0x00,0xE4,0x00,0x00,0xFF,0x75,0x00,0x73,0x00,0x65,0x00,0x0A,0x00,0x74,0x00,0x68,0x00,0x65,0x00,0x20,0x00,0x72,0x00,0x68,0x00,0x79,0x00,0x74,0x00,0x68,0x00,0x6D,0x00,0x20,0x00,0x74,0x00,0x6F,0x00,0x20,0x00,0x72,0x00,0x65,0x00,0x6D,0x00,0x65,0x00,0x6D,0x00,0x62,0x00,0x65,0x00,0x72,0x00,0x0E,0x00,0x00,0x00,0x03,0x00,0x04,0x00,0x00,0x00,0x00,0xFF,0x21,0x00,0x00,0x00];
    let constructed_string = ::msbt::structs::TXT2::parse_string(string.to_vec(), bytestream::ByteOrder::LittleEndian);
    println!("{}", constructed_string);
    Ok(())
}
pub fn read_string(slice: &[u8], size: usize) -> Option<String> {
    assert!(2*size <= slice.len());
    let iter = (0..size)
        .map(|i| u16::from_be_bytes([slice[2*i+1], slice[2*i]]));

    std::char::decode_utf16(iter).collect::<Result<String, _>>().ok()
}